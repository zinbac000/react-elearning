@mixin size($width, $height: $width, $min: null) {
  width: $width;
  height: $height;
  @if $min == 'min' {
    min-width: $width;
  }
}

@mixin flexbox(
  $align: null,
  $justify: null,
  $direction: null,
  $wrap: null,
  $order: null,
  $flex: flex
) {
  display: $flex;
  align-items: $align;
  justify-content: $justify;
  flex-direction: $direction;
  flex-wrap: $wrap;
  order: $order;
}

@mixin flexCenter() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin centerAbsolute($direction: 'both') {
  position: absolute;
  @if $direction == 'both' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  @if $direction == 'left' {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $direction == 'top' {
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number
    {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

@mixin absolute($args: '', $transX: null, $transY: null) {
  @include position(absolute, $args);

  @if ($transX and $transY) {
    transform: translate($transX, $transY);
  } @else if ($transX) {
    transform: translateX($transX);
  } @else if ($transY) {
    transform: translatey($transY);
  }
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}

@mixin truncateText($width: null) {
  width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  @if ($direction == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if ($direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if ($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}

@mixin screen($name) {
  @if map-has-key($map: $breakpoints, $key: $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin button-hover($defaultColor, $hoverColor: $defaultColor) {
  background-color: $defaultColor;
  transition: background-color 0.2s linear;

  &:hover,
  &:focus {
    background-color: $hoverColor;
  }
}

@mixin font-size($fs-map, $letter-spacing-percent: 0) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    $letter-spacing: $fs-font-size * ($letter-spacing-percent / 100);

    @if $fs-breakpoint == base {
      font-size: $fs-font-size;
      letter-spacing: $letter-spacing;
    } @else {
      @include screen($fs-breakpoint) {
        font-size: $fs-font-size;
        letter-spacing: $letter-spacing;
      }
    }
  }
}

@mixin background-color($bg-map) {
  @each $bg-breakpoint, $bg-background-color in $bg-map {
    @if $bg-breakpoint == base {
      background-color: $bg-background-color;
    } @else {
      @include screen($bg-breakpoint) {
        background-color: $bg-background-color;
      }
    }
  }
}
